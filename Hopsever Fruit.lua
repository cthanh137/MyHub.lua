--[[  
    üîÅ SERVER HOP V√î H·∫†N + LOG DISCORD (ANTI DUPLICATE)
    ‚úÖ Kh√¥ng bao gi·ªù v√†o l·∫°i server ƒë√£ t·ª´ng join.
    ‚úÖ T·ª± ƒë·ªông hop li√™n t·ª•c, c√≥ log Discord khi th√†nh c√¥ng.
    ‚öôÔ∏è Y√™u c·∫ßu executor c√≥ request() v√† TeleportService.
--]]

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- üîó Webhook Discord
local WEBHOOK_URL = "https://discord.com/api/webhooks/1429493470531424407/97lyF_Xu50SPQ8DXiXTc5B-vEhZD2UwehBqnC37VMlR2ZVX7mR3e18iwZsZ2TV0LViQP"

-- ‚öôÔ∏è C·∫•u h√¨nh
local HOP_DELAY = 5 -- th·ªùi gian gi·ªØa m·ªói l·∫ßn hop (gi√¢y)

-- üïí H√†m ƒë·ªãnh d·∫°ng th·ªùi gian
local function GetTimestamp()
    local now = os.date("!*t")
    return string.format("%02d/%02d/%04d %02d:%02d:%02d UTC", now.day, now.month, now.year, now.hour, now.min, now.sec)
end

-- üì§ G·ª≠i log Discord
local function SendDiscordLog(jobId)
    local data = {
        ["username"] = "Server Hop Logger",
        ["embeds"] = {{
            ["title"] = "‚úÖ Teleport Th√†nh C√¥ng!",
            ["description"] = string.format(
                "**Ng∆∞·ªùi ch∆°i:** %s\n**Job ID:** %s\n**Place ID:** %s\n**Th·ªùi gian:** %s",
                LocalPlayer.Name, jobId, game.PlaceId, GetTimestamp()
            ),
            ["color"] = 65280
        }}
    }

    pcall(function()
        request({
            Url = WEBHOOK_URL,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode(data)
        })
    end)
end

-- üß† L·∫•y danh s√°ch server ƒë√£ t·ª´ng join
local TriedServers = TeleportService:GetTeleportSetting("TriedServersList")
if typeof(TriedServers) ~= "table" then
    TriedServers = {}
end

-- ƒê√°nh d·∫•u server hi·ªán t·∫°i l√† ƒë√£ th·ª≠
TriedServers[game.JobId] = true
TeleportService:SetTeleportSetting("TriedServersList", TriedServers)

-- üöÄ H√†m t√¨m server m·ªõi ch∆∞a t·ª´ng v√†o
local function FindNewServer()
    local PlaceId = game.PlaceId
    local Cursor = ""
    local Api = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"

    while true do
        local ok, response = pcall(function()
            return request({Url = Api .. (Cursor ~= "" and "&cursor=" .. Cursor or ""), Method = "GET"})
        end)

        if not ok or not response or response.StatusCode ~= 200 then
            task.wait(1)
            continue
        end

        local success, data = pcall(function()
            return HttpService:JSONDecode(response.Body)
        end)

        if success and data and data.data then
            for _, server in ipairs(data.data) do
                if server.playing < server.maxPlayers and not TriedServers[server.id] then
                    return server.id
                end
            end
            if data.nextPageCursor then
                Cursor = data.nextPageCursor
            else
                break
            end
        else
            break
        end
    end
end

-- üîÅ Loop v√¥ h·∫°n
task.spawn(function()
    while task.wait(HOP_DELAY) do
        local newServer = FindNewServer()
        if newServer then
            print("üîÅ Teleport t·ªõi server m·ªõi:", newServer)
            TriedServers[newServer] = true
            TeleportService:SetTeleportSetting("TriedServersList", TriedServers)
            SendDiscordLog(newServer)

            pcall(function()
                TeleportService:TeleportToPlaceInstance(game.PlaceId, newServer, LocalPlayer)
            end)
            task.wait(2)
        else
            warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y server m·ªõi, reset danh s√°ch...")
            TriedServers = {}
            TriedServers[game.JobId] = true
            TeleportService:SetTeleportSetting("TriedServersList", TriedServers)
            task.wait(3)
        end
    end
end)

-- ‚úÖ G·ª≠i log khi v√†o game
task.defer(function()
    task.wait(1)
    SendDiscordLog(game.JobId)
end)
