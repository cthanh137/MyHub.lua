--[[  
    üöÄ PERFECT SERVER HOP V5 (0% FAIL, NO DUPLICATE, DISCORD LOG)
    ‚úÖ T·ª± ƒë·ªông hop m∆∞·ª£t, retry li√™n t·ª•c n·∫øu request l·ªói.
    ‚úÖ Kh√¥ng v√†o l·∫°i server c≈©, kh√¥ng b·ªã stuck, kh√¥ng ch·ªù delay.
    ‚úÖ G·ª≠i log Discord m·ªói khi teleport th√†nh c√¥ng.
    ‚öôÔ∏è D√πng ƒë∆∞·ª£c v·ªõi Synapse, Solara, Krnl, Fluxus, v.v.
--]]

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- üîó Webhook Discord
local WEBHOOK_URL = "https://discord.com/api/webhooks/1429493470531424407/97lyF_Xu50SPQ8DXiXTc5B-vEhZD2UwehBqnC37VMlR2ZVX7mR3e18iwZsZ2TV0LViQP"

-- ‚öôÔ∏è Config
local PLACE_ID = game.PlaceId
local MAX_PAGES = 2000
local RETRY_DELAY = 0.01 -- c·ª±c nh·ªè, hop si√™u nhanh

-- üïí Format th·ªùi gian
local function GetTimestamp()
	local t = os.date("!*t")
	return string.format("%02d/%02d/%04d %02d:%02d:%02d UTC", t.day, t.month, t.year, t.hour, t.min, t.sec)
end

-- üì§ G·ª≠i log Discord
local function SendDiscordLog(jobId)
	local data = {
		username = "Server Hop Logger",
		embeds = {{
			title = "‚úÖ Teleport Th√†nh C√¥ng!",
			description = string.format(
				"**Ng∆∞·ªùi ch∆°i:** %s\n**Job ID:** %s\n**Place ID:** %s\n**Th·ªùi gian:** %s",
				LocalPlayer.Name, jobId, PLACE_ID, GetTimestamp()
			),
			color = 65280
		}}
	}
	pcall(function()
		request({
			Url = WEBHOOK_URL,
			Method = "POST",
			Headers = {["Content-Type"] = "application/json"},
			Body = HttpService:JSONEncode(data)
		})
	end)
end

-- üß† L∆∞u danh s√°ch server ƒë√£ v√†o
local TriedServers = TeleportService:GetTeleportSetting("TriedServersList")
if typeof(TriedServers) ~= "table" then
	TriedServers = {}
end
TriedServers[game.JobId] = true
TeleportService:SetTeleportSetting("TriedServersList", TriedServers)

-- üîç H√†m request an to√†n (retry v√¥ h·∫°n cho ƒë·∫øn khi c√≥ ph·∫£n h·ªìi h·ª£p l·ªá)
local function SafeRequest(url)
	while true do
		local ok, res = pcall(function()
			return request({Url = url, Method = "GET"})
		end)
		if ok and res and res.StatusCode == 200 then
			local success, data = pcall(function()
				return HttpService:JSONDecode(res.Body)
			end)
			if success and data and data.data then
				return data
			end
		end
		task.wait(RETRY_DELAY)
	end
end

-- üöÄ T√¨m server m·ªõi ch∆∞a t·ª´ng v√†o
local function FindServer()
	local cursor = ""
	for _ = 1, MAX_PAGES do
		local url = string.format(
			"https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=200&cursor=%s",
			PLACE_ID, cursor
		)
		local data = SafeRequest(url)

		for _, server in ipairs(data.data) do
			if not TriedServers[server.id] and server.playing < server.maxPlayers then
				return server.id
			end
		end

		cursor = data.nextPageCursor or ""
		if cursor == "" then break end
	end
	return nil
end

-- üîÅ Loop v√¥ h·∫°n, retry cho ƒë·∫øn khi teleport th√†nh c√¥ng
while true do
	local newServer = FindServer()
	if newServer then
		print("üîÅ Teleporting to server:", newServer)
		TriedServers[newServer] = true
		TeleportService:SetTeleportSetting("TriedServersList", TriedServers)
		SendDiscordLog(newServer)

		local ok, err = pcall(function()
			TeleportService:TeleportToPlaceInstance(PLACE_ID, newServer, LocalPlayer)
		end)

		if ok then
			break -- teleport th√†nh c√¥ng => script d·ª´ng t·∫°i ƒë√¢y
		else
			warn("‚ö†Ô∏è Teleport l·ªói:", err)
			task.wait(RETRY_DELAY)
		end
	else
		-- n·∫øu h·∫øt server => reset danh s√°ch
		warn("üîÑ H·∫øt server, reset danh s√°ch v√† th·ª≠ l·∫°i...")
		TriedServers = {}
		TriedServers[game.JobId] = true
		TeleportService:SetTeleportSetting("TriedServersList", TriedServers)
		task.wait(RETRY_DELAY)
	end
end

-- ‚úÖ G·ª≠i log khi m·ªõi load
task.defer(function()
	task.wait(1)
	SendDiscordLog(game.JobId)
end)
