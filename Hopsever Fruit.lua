local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- ƒê·∫£m b·∫£o ƒë√£ l·∫•y ƒë∆∞·ª£c LocalPlayer
if not LocalPlayer then
    Players.LocalPlayerAdded:Wait()
    LocalPlayer = Players.LocalPlayer
end

-- ‚öôÔ∏è C·∫•u h√¨nh
local MIN_PLAYER_COUNT = 10
local MAX_PLAYER_COUNT = 18
local PLACE_ID = game.PlaceId
local MAX_PAGES = 50
local RETRY_DELAY = 2 -- TƒÉng delay m·ªôt ch√∫t ƒë·ªÉ an to√†n h∆°n

-- L·∫•y danh s√°ch server ƒë√£ th·ª≠ t·ª´ session tr∆∞·ªõc
local triedServers = TeleportService:GetTeleportSetting("TriedServersList")

-- N·∫øu kh√¥ng c√≥ danh s√°ch (l·∫ßn ch·∫°y ƒë·∫ßu) ho·∫∑c data h·ªèng, t·∫°o b·∫£ng m·ªõi
if typeof(triedServers) ~= "table" then
    triedServers = {}
end

-- Th√™m server HI·ªÜN T·∫†I v√†o danh s√°ch ƒë√£ th·ª≠ ƒë·ªÉ tr√°nh b·ªã l·∫∑p l·∫°i ch√≠nh n√≥
triedServers[game.JobId] = true
-- L∆∞u l·∫°i ngay l·∫≠p t·ª©c
TeleportService:SetTeleportSetting("TriedServersList", triedServers)

-- üîç L·∫•y danh s√°ch server
local function GetServers(placeId)
    local servers = {}
    local cursor = ""
    local pageCount = 0

    repeat
        pageCount += 1
        if pageCount > MAX_PAGES then break end

        local url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?limit=50&cursor=%s", placeId, cursor)
        
        -- Gi·∫£ ƒë·ªãnh r·∫±ng 'request' l√† m·ªôt h√†m global ho·∫°t ƒë·ªông (v√≠ d·ª•: trong m·ªôt m√¥i tr∆∞·ªùng ƒë·∫∑c bi·ªát)
        -- Trong LocalScript chu·∫©n, b·∫°n s·∫Ω c·∫ßn d√πng RemoteFunction ƒë·ªÉ g·ªçi l√™n server
        local success, response = pcall(function()
            return request({ Url = url, Method = "GET" })
        end)

        if success and response and response.StatusCode == 200 then
            local data = HttpService:JSONDecode(response.Body)
            if data and data.data then
                for _, server in ipairs(data.data) do
                    -- ‚≠êÔ∏è THAY ƒê·ªîI QUAN TR·ªåNG:
                    -- 1. not triedServers[server.id]: Server ch∆∞a t·ª´ng th·ª≠
                    -- 2. server.playing >= MIN_PLAYER_COUNT: ƒê·ªß ng∆∞·ªùi t·ªëi thi·ªÉu
                    -- 3. server.playing <= MAX_PLAYER_COUNT: Kh√¥ng qu√° ƒë√¥ng
                    -- 4. server.playing < server.maxPlayers: CH·∫ÆC CH·∫ÆN C√íN CH·ªñ TR·ªêNG (tr√°nh l·ªói full 18/18)
                    if not triedServers[server.id] and
                       server.playing >= MIN_PLAYER_COUNT and
                       server.playing <= MAX_PLAYER_COUNT and
                       server.playing < server.maxPlayers then
                        
                        table.insert(servers, server)
                    end
                end
                cursor = data.nextPageCursor or ""
            else
                break
            end
        else
            warn("‚ö†Ô∏è L·ªói khi l·∫•y danh s√°ch server:", response and response.Body)
            break
        end
    until cursor == ""

    return servers
end

-- üß≠ T√¨m server
local function FindServer()
    local allServers = GetServers(PLACE_ID)
    if #allServers == 0 then
        warn("‚ùå Kh√¥ng c√≥ server n√†o kh·∫£ d·ª•ng ho·∫∑c ƒë√£ th·ª≠ t·∫•t c·∫£. ƒêang reset danh s√°ch...")
        -- Reset danh s√°ch v√† th√™m l·∫°i server hi·ªán t·∫°i
        triedServers = {}
        triedServers[game.JobId] = true
        TeleportService:SetTeleportSetting("TriedServersList", triedServers) -- L∆∞u danh s√°ch ƒë√£ reset
        return nil
    end

    -- Ch·ªçn server ng·∫´u nhi√™n trong danh s√°ch h·ª£p l·ªá
    local server = allServers[math.random(1, #allServers)]
    return server
end

-- üîÅ V√≤ng l·∫∑p auto hop (s·∫Ω ch·∫°y l·∫°i m·ªói khi v√†o server m·ªõi)
while task.wait(RETRY_DELAY) do
    local targetServer = FindServer()
    
    if targetServer then
        warn(string.format("üîÑ Chu·∫©n b·ªã chuy·ªÉn sang server [ID: %s] c√≥ %d/%d ng∆∞·ªùi...", targetServer.id:sub(1, 8), targetServer.playing, targetServer.maxPlayers))

        -- ‚≠êÔ∏è ƒê√ÅNH D·∫§U SERVER S·∫ÆP V√ÄO L√Ä "ƒê√É TH·ª¨" TR∆Ø·ªöC KHI TELEPORT
        triedServers[targetServer.id] = true
        -- L∆ØU DANH S√ÅCH N√ÄY CHO L·∫¶N CH·∫†Y SCRIPT TI·∫æP THEO (SAU KHI TELEPORT XONG)
        TeleportService:SetTeleportSetting("TriedServersList", triedServers)

        local ok, err = pcall(function()
            TeleportService:TeleportToPlaceInstance(PLACE_ID, targetServer.id, LocalPlayer)
        end)
        
        if ok then
            -- Teleport ƒë√£ ƒë∆∞·ª£c B·∫ÆT ƒê·∫¶U. Script s·∫Ω d·ª´ng ·ªü ƒë√¢y.
            -- Khi v√†o server m·ªõi, script s·∫Ω ch·∫°y l·∫°i t·ª´ ƒë·∫ßu v√† ƒë·ªçc 'TriedServersList' ƒë√£ l∆∞u.
            break 
        else
            -- L·ªói teleport (v√≠ d·ª•: server v·ª´a ƒë·∫ßy ngay tr∆∞·ªõc khi teleport)
            -- 'triedServers' ƒë√£ l∆∞u ID n√†y, n√™n v√≤ng l·∫∑p ti·∫øp theo s·∫Ω kh√¥ng ch·ªçn l·∫°i n√≥
            warn("‚ö†Ô∏è L·ªói teleport (server c√≥ th·ªÉ ƒë√£ ƒë·∫ßy):", err)
        end
    else
        -- FindServer() tr·∫£ v·ªÅ nil (do ƒë√£ reset ho·∫∑c ƒëang ch·ªù)
        warn("‚è≥ Kh√¥ng t√¨m th·∫•y server ph√π h·ª£p, th·ª≠ l·∫°i sau...")
    end
end
